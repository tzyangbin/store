<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace指定当前的映射文件和哪个接口进行映射,需要指定文件接口路径,需要标注包的完整路径接口
配置接口方法对应sql语句上,需要借助标签来完成,insert/update/delete/select,对应sql增/删/改/查操作-->
<mapper namespace="com.tz.store.mapper.UserMapper">
    <!--自定义规则resultMap,id:表示给这个映射分配一个唯一id值，
    type是一个类，表示的是数据库中的查询结果与-->
    <resultMap id="UserEntityMap" type="com.tz.store.entity.User">
        <!--将表的字段不一致进行匹配-->
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>
    <!--插入操作,id的值:表示映射的接口的名称,直接在标签的内容来写sql语句
    useGeneratedKeys属性:开启主键为递增,useGeneratedKeys:标签字段-->

    <!-- 插入用户数据：Integer insert(User user) -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO t_user (username, password, salt, phone, email, gender, avatar, is_delete,
                            created_user, created_time, modified_user, modified_time)
        VALUES (#{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete},
                #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
    </insert>
    <!-- 根据uid更新用户的密码：
	     Integer updatePasswordByUid(
		    @Param("uid") Integer uid,
		    @Param("password") String password,
		    @Param("modifiedUser") String modifiedUser,
		    @Param("modifiedTime") Date modifiedTime) -->
    <update id="updatePasswordByUid">
        UPDATE
            t_user
        SET password      = #{password},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE uid = #{uid}
    </update>
    <!-- select 在执行的时候,查询的是一个对象,多个对象。
    单个对象 resultType:表示查询的结果集类型，只需要指定对应映射的类的类型，并且包含完整的包接口com.tz.store.entity.User
    resultMap:当表的字段不一致，来自定义查询结果集映射的规则-->
    <!-- 根据用户名查询用户数据：User findByUsername(String username) -->
    <select id="findByUsername" resultMap="UserEntityMap">
        SELECT *
        FROM t_user
        WHERE username = #{username}
    </select>
    <!--根据用户id查询-->
    <select id="findByUid" resultMap="UserEntityMap">
        SELECT *
        FROM t_user
        WHERE uid = #{uid}
    </select>


    <!-- 根据uid更新用户个人资料：Integer updateInfoByUid(User user) -->
    <!--    if表示条件判断标签,test接收的是一个返回值为boolean类型的条件
            test条件为true则执行if标签内部的语句-->
    <update id="updateInfoByUid">
        UPDATE t_user
        SET
        <if test="phone != null">
            phone = #{phone},
        </if>
        <if test="email != null">
            email = #{email},
        </if>
        <if test="gender != null">
            gender = #{gender},
        </if>
        modified_user = #{modifiedUser},
        modified_time = #{modifiedTime}
        WHERE
        uid = #{uid}
    </update>

    <!-- 根据uid更新用户的头像
	     Integer updateAvatarByUid(
		    @Param("uid") Integer uid,
		    @Param("avatar") String avatar,
		    @Param("modifiedUser") String modifiedUser,
		    @Param("modifiedTime") Date modifiedTime) -->
    <update id="updateAvatarByUid">
        UPDATE
            t_user
        SET avatar = #{avatar},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE uid = #{uid}
    </update>

</mapper>